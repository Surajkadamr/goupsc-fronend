import "../styles/global.css";
import Script from "next/script";
import Navbar from "../components/navbar";
import Bottombar from "../components/bottombar";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import BreadcrumbItem from "../components/breadcrumbitem";
import Breadcrumb from "../components/breadcrumb";
import Footer from "../components/footer";
import LoadingBar from "react-top-loading-bar";
import Head from "next/head";

export default function App({ Component, pageProps }) {
  const router = useRouter();
  const [bread, setBreadcrumbs] = useState("");
  const [check, setcheck] = useState(false);
  const [check1, setcheck1] = useState(false);
  const [progress, setProgress] = useState(0);
  const [token, settoken] = useState();
  const [name, setname] = useState();
  const [email, setemail] = useState();
  const [c, setc] = useState();

  useEffect(() => {
    router.events.on("routeChangeStart", () => {
      setProgress(30);
    });
    router.events.on("routeChangeComplete", () => {
      setProgress(100);
    });
    if (localStorage.getItem("token")) {
      settoken(localStorage.getItem("token"));
      setname(localStorage.getItem("name"));
      setemail(localStorage.getItem("email"));
      setc(Math.random());
    } else {
      setc(Math.random());
    }
    try {
      const pathWithoutQuery = router.asPath.split("?")[0];
      let pathArray = pathWithoutQuery.split("/");
      pathArray.shift();
      setcheck(false);
      setcheck1(false);
      for (let index = 0; index < pathArray.length; index++) {
        if (pathArray[index] === "test-page") {
          setcheck(true);
        } else if (pathArray[index] === "viewresults") {
          setcheck1(true);
        }
      }
      pathArray = pathArray.filter((path) => path !== "");
      const breadcrumbs = pathArray.map((path, index) => {
        const href = "/" + pathArray.slice(0, index + 1).join("/");
        return {
          href,
          label: path.charAt(0).toUpperCase() + path.slice(1),
          isCurrent: index === pathArray.length - 1,
        };
      });
      setBreadcrumbs(breadcrumbs);
    } catch (error) {
      console.log(error);
    }
  }, [router.query]);

  const logOut = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("name");
    localStorage.removeItem("email");
    localStorage.removeItem("imp");
    settoken();
    setname();
    setemail();
    setc(Math.random());
    router.push("/");
  };

  return (
    <>
      <Head>
        <title>GO-UPSC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="https://goupsc.com/img/logo_2x.png" />
      </Head>
      <LoadingBar
        color="blue"
        height={3}
        progress={progress}
        waitingTime={400}
        onLoaderFinished={() => setProgress(0)}
      />
      <Navbar key={c} logOut={logOut} token={token} name={name} check={check} />
      {router.pathname !== "/" && check === false && (
        <Breadcrumb>
          <BreadcrumbItem isCurrent={router.pathname === "/"} href="/">
            Home
          </BreadcrumbItem>
          {bread &&
            bread.map((breadcrumb) => (
              <BreadcrumbItem
                key={breadcrumb.href}
                href={breadcrumb.href}
                isCurrent={breadcrumb.isCurrent}
              >
                {breadcrumb.label}
              </BreadcrumbItem>
            ))}
        </Breadcrumb>
      )}
      <Component
        key={c + 1}
        logOut={logOut}
        token={token}
        email={email}
        name={name}
        {...pageProps}
      />
      {check === false && check1 === false && <Footer />}
      {(check === false || check1 === true) && <Bottombar />}
      <Script
        src="https://cdn.jsdelivr.net/npm/tw-elements/dist/js/index.min.js"
        strategy="lazyOnload"
      ></Script>
      <Script
        src="https://unpkg.com/flowbite@1.5.4/dist/flowbite.js"
        strategy="lazyOnload"
      ></Script>
    </>
  );
}
